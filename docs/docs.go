// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/products": {
            "get": {
                "description": "Retrieves a list of products from the supplier API and returns it",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "products"
                ],
                "summary": "Retrieve a list of products from the supplier API",
                "parameters": [
                    {
                        "type": "string",
                        "description": "SuplierID",
                        "name": "suplier_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page size",
                        "name": "size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of namespaces",
                        "schema": {
                            "$ref": "#/definitions/controller.SuccessResponse"
                        }
                    },
                    "500": {
                        "description": "Bad request or error message",
                        "schema": {
                            "$ref": "#/definitions/controller.FailureResponse"
                        }
                    }
                }
            }
        },
        "/products/{id}": {
            "get": {
                "description": "Retrieves a product from the supplier API and returns it",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "products"
                ],
                "summary": "Retrieve a product by Product Main ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ProductMainID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "SuplierID",
                        "name": "suplier_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/controller.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/model.Product"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/controller.FailureResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "controller.FailureResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "controller.SuccessResponse": {
            "type": "object",
            "properties": {
                "data": {},
                "message": {
                    "type": "string"
                }
            }
        },
        "model.Attribute": {
            "type": "object",
            "properties": {
                "attributeId": {
                    "type": "integer"
                },
                "attributeValueId": {
                    "type": "integer"
                },
                "customAttributeValue": {
                    "type": "string"
                }
            }
        },
        "model.DeliveryOption": {
            "type": "object",
            "properties": {
                "deliveryDuration": {
                    "type": "integer"
                },
                "fastDeliveryType": {
                    "type": "string"
                }
            }
        },
        "model.Image": {
            "type": "object",
            "properties": {
                "url": {
                    "type": "string"
                }
            }
        },
        "model.Product": {
            "type": "object",
            "properties": {
                "attributes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Attribute"
                    }
                },
                "barcode": {
                    "type": "string"
                },
                "brandId": {
                    "type": "integer"
                },
                "cargoCompanyId": {
                    "type": "integer"
                },
                "categoryId": {
                    "type": "integer"
                },
                "currencyType": {
                    "type": "string"
                },
                "deliveryOption": {
                    "$ref": "#/definitions/model.DeliveryOption"
                },
                "description": {
                    "type": "string"
                },
                "dimensionalWeight": {
                    "type": "integer"
                },
                "images": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Image"
                    }
                },
                "listPrice": {
                    "type": "number"
                },
                "productMainId": {
                    "type": "string"
                },
                "quantity": {
                    "type": "integer"
                },
                "salePrice": {
                    "type": "number"
                },
                "stockCode": {
                    "type": "string"
                },
                "supplierId": {
                    "type": "integer"
                },
                "title": {
                    "type": "string"
                },
                "vatRate": {
                    "type": "integer"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
